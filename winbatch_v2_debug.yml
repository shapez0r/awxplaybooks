---
# WinBatch V2 Debug - Отладочный playbook для диагностики проблем
- name: "🔍 WinBatch V2 Debug & Diagnostics"
  hosts: all
  gather_facts: false
  
  vars:
    ansible_shell_type: powershell
  
  tasks:
    # Сначала проверяем обычное SSH подключение
    - name: "🔧 Test 1: Standard SSH connectivity"
      shell: echo "SSH connection test successful"
      connection: ssh
      register: ssh_test
      ignore_errors: true
      
    - name: "📊 SSH Test Result"
      debug:
        msg: |
          SSH Test: {{ 'PASSED' if ssh_test.rc == 0 else 'FAILED' }}
          {% if ssh_test.failed %}
          Error: {{ ssh_test.msg | default('Unknown error') }}
          {% endif %}
    
    # Проверяем доступность PowerShell через SSH
    - name: "🔧 Test 2: PowerShell via SSH"
      shell: powershell -Command "Write-Host 'PowerShell via SSH working'; Get-Date"
      connection: ssh
      register: ps_ssh_test
      ignore_errors: true
      
    - name: "📊 PowerShell SSH Test Result"
      debug:
        msg: |
          PowerShell SSH Test: {{ 'PASSED' if ps_ssh_test.rc == 0 else 'FAILED' }}
          {% if ps_ssh_test.failed %}
          Error: {{ ps_ssh_test.msg | default('Unknown error') }}
          {% endif %}
          {% if not ps_ssh_test.failed %}
          Output: {{ ps_ssh_test.stdout }}
          {% endif %}
    
    # Проверяем WinRM как fallback
    - name: "🔧 Test 3: WinRM connectivity (fallback)"
      win_shell: |
        Write-Host "WinRM connection test successful"
        Get-Date
      connection: winrm
      register: winrm_test
      ignore_errors: true
      
    - name: "📊 WinRM Test Result"
      debug:
        msg: |
          WinRM Test: {{ 'PASSED' if winrm_test.rc == 0 else 'FAILED' }}
          {% if winrm_test.failed %}
          Error: {{ winrm_test.msg | default('Unknown error') }}
          {% endif %}
          {% if not winrm_test.failed %}
          Output: {{ winrm_test.stdout }}
          {% endif %}
    
    # Теперь тестируем WinBatch V2 с минимальными настройками
    - name: "🚀 Test 4: WinBatch V2 Basic Test"
      win_shell: |
        Write-Host "WinBatch V2 basic test"
        $env:COMPUTERNAME
      connection: winbatch_v2
      vars:
        ansible_connection: winbatch_v2
        ansible_winbatch_batch_size: 1  # Минимальный размер для отладки
        ansible_winbatch_status_interval: 10
        ansible_winbatch_execution_timeout: 300
        ansible_winbatch_ssh_timeout: 60
      register: winbatch_basic_test
      ignore_errors: true
      
    - name: "📊 WinBatch V2 Basic Test Result"
      debug:
        msg: |
          WinBatch V2 Basic Test: {{ 'PASSED' if winbatch_basic_test.rc == 0 else 'FAILED' }}
          {% if winbatch_basic_test.failed %}
          Error: {{ winbatch_basic_test.msg | default('Unknown error') }}
          {% endif %}
          {% if not winbatch_basic_test.failed %}
          Output: {{ winbatch_basic_test.stdout }}
          {% endif %}
    
    # Если базовый тест прошел, проверяем пакетную обработку
    - name: "🚀 Test 5: WinBatch V2 Batch Processing"
      block:
        - name: "Batch Task 1"
          win_shell: Write-Host "Batch task 1 - $(Get-Date)"
          connection: winbatch_v2
          vars:
            ansible_connection: winbatch_v2
            ansible_winbatch_batch_size: 3
          register: batch_task1
          
        - name: "Batch Task 2"
          win_shell: Write-Host "Batch task 2 - $env:COMPUTERNAME"
          connection: winbatch_v2
          register: batch_task2
          
        - name: "Batch Task 3"
          win_shell: Write-Host "Batch task 3 - $(Get-WmiObject Win32_OperatingSystem | Select-Object Caption)"
          connection: winbatch_v2
          register: batch_task3
          
      rescue:
        - name: "📊 Batch Test Failed"
          debug:
            msg: "WinBatch V2 Batch Processing: FAILED - {{ ansible_failed_result.msg | default('Unknown error') }}"
      
      when: winbatch_basic_test.rc == 0
    
    # Финальный отчет
    - name: "📋 Final Diagnostic Report"
      debug:
        msg: |
          ╔══════════════════════════════════════════════════════════════════════════════╗
          ║                    🔍 WINBATCH V2 DIAGNOSTIC REPORT 🔍                     ║
          ╠══════════════════════════════════════════════════════════════════════════════╣
          ║                                                                              ║
          ║  🔧 SSH Connection: {{ 'PASSED' if ssh_test.rc == 0 else 'FAILED' }}                                              ║
          ║  🔧 PowerShell via SSH: {{ 'PASSED' if ps_ssh_test.rc == 0 else 'FAILED' }}                                      ║
          ║  🔧 WinRM Connection: {{ 'PASSED' if winrm_test.rc == 0 else 'FAILED' }}                                         ║
          ║  🚀 WinBatch V2 Basic: {{ 'PASSED' if winbatch_basic_test.rc == 0 else 'FAILED' }}                               ║
          ║  🚀 WinBatch V2 Batch: {{ 'PASSED' if (batch_task1.rc == 0 and batch_task2.rc == 0 and batch_task3.rc == 0) else 'FAILED' }}                               ║
          ║                                                                              ║
          ║  📊 RECOMMENDATIONS:                                                         ║
          {% if ssh_test.rc != 0 %}
          ║     ❌ SSH connection failed - check OpenSSH Server on Windows              ║
          {% endif %}
          {% if ps_ssh_test.rc != 0 %}
          ║     ❌ PowerShell via SSH failed - check SSH shell configuration           ║
          {% endif %}
          {% if winrm_test.rc == 0 and winbatch_basic_test.rc != 0 %}
          ║     💡 WinRM works but WinBatch V2 fails - check plugin configuration      ║
          {% endif %}
          {% if winbatch_basic_test.rc == 0 %}
          ║     ✅ WinBatch V2 is working! You can use it for automation               ║
          {% endif %}
          ║                                                                              ║
          ╚══════════════════════════════════════════════════════════════════════════════╝
      
    # Дополнительная диагностика при ошибках
    - name: "🔍 Additional Diagnostics"
      block:
        - name: "Check SSH service on Windows"
          win_shell: |
            try {
              $sshService = Get-Service -Name sshd -ErrorAction Stop
              Write-Host "SSH Service Status: $($sshService.Status)"
              Write-Host "SSH Service StartType: $($sshService.StartType)"
            } catch {
              Write-Host "SSH Service not found or not accessible"
            }
          connection: winrm
          register: ssh_service_check
          ignore_errors: true
          
        - name: "Check SSH configuration"
          win_shell: |
            $sshConfigPath = "C:\ProgramData\ssh\sshd_config"
            if (Test-Path $sshConfigPath) {
              Write-Host "SSH config file exists"
              $defaultShell = Get-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -ErrorAction SilentlyContinue
              if ($defaultShell) {
                Write-Host "Default SSH Shell: $($defaultShell.DefaultShell)"
              } else {
                Write-Host "Default SSH Shell: Not configured (using cmd)"
              }
            } else {
              Write-Host "SSH config file not found"
            }
          connection: winrm
          register: ssh_config_check
          ignore_errors: true
          
        - name: "📊 SSH Diagnostics"
          debug:
            msg: |
              SSH Service Check: {{ ssh_service_check.stdout | default('Failed to check') }}
              SSH Config Check: {{ ssh_config_check.stdout | default('Failed to check') }}
              
      when: winbatch_basic_test.rc != 0
      ignore_errors: true 