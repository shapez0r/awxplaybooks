---
# WinBatch V2 Demo - –°–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è (–ë–ï–ó –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ EE!)
# –≠—Ç–æ—Ç playbook –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º AWX EE

- name: "üöÄ WinBatch V2 Demo - No Custom EE Required!"
  hosts: windows_servers
  gather_facts: true
  connection: winbatch_v2  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –≤–µ—Ä—Å–∏—é!
  
  vars:
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WinBatch V2 –ø–ª–∞–≥–∏–Ω–∞
    ansible_connection: winbatch_v2
    ansible_winbatch_batch_size: 15  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –∑–∞–¥–∞—á
    ansible_winbatch_status_interval: 3  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    ansible_winbatch_execution_timeout: 1800  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    ansible_winbatch_ssh_timeout: 60  # –¢–∞–π–º–∞—É—Ç SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_directories:
      - "C:\\WinBatch_V2_Demo"
      - "C:\\WinBatch_V2_Demo\\logs"
      - "C:\\WinBatch_V2_Demo\\results"
      - "C:\\WinBatch_V2_Demo\\reports"
    
    test_files:
      - "system_info.txt"
      - "network_config.txt"
      - "services_status.txt"
      - "performance_metrics.txt"
  
  tasks:
    # === –ë–õ–û–ö 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
    - name: "üëã WinBatch V2: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
      debug:
        msg: |
          ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
          ‚ïë                     üöÄ WINBATCH V2 REVOLUTION! üöÄ                          ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïë  ‚úÖ –°–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø–ª–∞–≥–∏–Ω - –ë–ï–ó –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ EE!                             ‚ïë
          ‚ïë  ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º AWX Execution Environment                  ‚ïë  
          ‚ïë  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π                                   ‚ïë
          ‚ïë  ‚úÖ –ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 300-500%                                     ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïë  Batch Size: {{ ansible_winbatch_batch_size }}                              ‚ïë
          ‚ïë  Status Interval: {{ ansible_winbatch_status_interval }}s                  ‚ïë
          ‚ïë  Connection: {{ ansible_connection }}                                       ‚ïë
          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
      tags:
        - welcome
        - batch_demo

    # === –ë–õ–û–ö 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ===
    - name: "üìÅ WinBatch V2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
      win_shell: |
        if (!(Test-Path "{{ item }}")) {
            New-Item -ItemType Directory -Path "{{ item }}" -Force
            Write-Host "Created directory: {{ item }}"
        } else {
            Write-Host "Directory already exists: {{ item }}"
        }
      loop: "{{ test_directories }}"
      register: dir_creation_results
      tags:
        - directories
        - batch_demo

    # === –ë–õ–û–ö 3: –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===
    - name: "üíª WinBatch V2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
      win_shell: |
        $systemInfo = @{
            'hostname' = $env:COMPUTERNAME
            'os' = (Get-WmiObject Win32_OperatingSystem).Caption
            'version' = (Get-WmiObject Win32_OperatingSystem).Version
            'architecture' = (Get-WmiObject Win32_OperatingSystem).OSArchitecture
            'memory_gb' = [math]::Round((Get-WmiObject Win32_ComputerSystem).TotalPhysicalMemory / 1GB, 2)
            'cpu' = (Get-WmiObject Win32_Processor).Name
            'timestamp' = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
        }
        $systemInfo | ConvertTo-Json -Depth 2
      register: system_info
      tags:
        - system_info
        - batch_demo

    - name: "üíæ WinBatch V2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
      win_shell: |
        $content = @"
{{ system_info.stdout }}
"@
        $content | Set-Content "C:\WinBatch_V2_Demo\system_info.txt" -Encoding UTF8
        Write-Host "System information saved"
      tags:
        - system_info
        - batch_demo

    # === –ë–õ–û–ö 4: –°–µ—Ç–µ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
    - name: "üåê WinBatch V2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
      win_shell: |
        $networkInfo = @()
        $adapters = Get-NetAdapter | Where-Object {$_.Status -eq 'Up'}
        foreach ($adapter in $adapters) {
            $ip = Get-NetIPAddress -InterfaceIndex $adapter.InterfaceIndex -AddressFamily IPv4 -ErrorAction SilentlyContinue
            $networkInfo += @{
                'name' = $adapter.Name
                'description' = $adapter.InterfaceDescription
                'status' = $adapter.Status
                'speed' = $adapter.LinkSpeed
                'ip_address' = if ($ip) { $ip.IPAddress } else { "N/A" }
            }
        }
        $networkInfo | ConvertTo-Json -Depth 2
      register: network_info
      tags:
        - network
        - batch_demo

    - name: "üíæ WinBatch V2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
      win_shell: |
        $content = @"
{{ network_info.stdout }}
"@
        $content | Set-Content "C:\WinBatch_V2_Demo\network_config.txt" -Encoding UTF8
        Write-Host "Network configuration saved"
      tags:
        - network
        - batch_demo

    # === –ë–õ–û–ö 5: –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–± ===
    - name: "üîß WinBatch V2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–ª—É–∂–±"
      win_shell: |
        $services = @('Spooler', 'Themes', 'AudioSrv', 'BITS', 'EventLog', 'Winmgmt')
        $serviceStatus = @()
        foreach ($serviceName in $services) {
            $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
            if ($service) {
                $serviceStatus += @{
                    'name' = $serviceName
                    'display_name' = $service.DisplayName
                    'status' = $service.Status
                    'start_type' = $service.StartType
                }
            } else {
                $serviceStatus += @{
                    'name' = $serviceName
                    'status' = 'NotFound'
                }
            }
        }
        $serviceStatus | ConvertTo-Json -Depth 2
      register: services_status
      tags:
        - services
        - batch_demo

    - name: "üíæ WinBatch V2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±"
      win_shell: |
        $content = @"
{{ services_status.stdout }}
"@
        $content | Set-Content "C:\WinBatch_V2_Demo\services_status.txt" -Encoding UTF8
        Write-Host "Services status saved"
      tags:
        - services
        - batch_demo

    # === –ë–õ–û–ö 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã ===
    - name: "üìà WinBatch V2: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
      win_shell: |
        $perfMetrics = @{
            'cpu_usage' = (Get-WmiObject win32_processor | Measure-Object -property LoadPercentage -Average).Average
            'memory_available_gb' = [math]::Round((Get-WmiObject Win32_OperatingSystem).FreePhysicalMemory / 1MB, 2)
            'disk_free_gb' = [math]::Round((Get-WmiObject Win32_LogicalDisk -Filter "DeviceID='C:'").FreeSpace / 1GB, 2)
            'uptime_hours' = [math]::Round(((Get-Date) - (Get-WmiObject Win32_OperatingSystem).ConvertToDateTime((Get-WmiObject Win32_OperatingSystem).LastBootUpTime)).TotalHours, 2)
            'processes_count' = (Get-Process).Count
            'timestamp' = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
        }
        $perfMetrics | ConvertTo-Json -Depth 2
      register: performance_metrics
      tags:
        - performance
        - batch_demo

    - name: "üíæ WinBatch V2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
      win_shell: |
        $content = @"
{{ performance_metrics.stdout }}
"@
        $content | Set-Content "C:\WinBatch_V2_Demo\performance_metrics.txt" -Encoding UTF8
        Write-Host "Performance metrics saved"
      tags:
        - performance
        - batch_demo

    # === –ë–õ–û–ö 7: –°–æ–∑–¥–∞–Ω–∏–µ PowerShell —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
    - name: "üìù WinBatch V2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
      win_shell: |
        $monitoringScript = @"
# WinBatch V2 Monitoring Script
# Generated automatically by WinBatch V2 Self-Contained Plugin

Write-Host "WinBatch V2 System Monitoring Report" -ForegroundColor Green
Write-Host "Generated: `$(Get-Date)" -ForegroundColor Yellow
Write-Host "=" * 50

# System Information
Write-Host "`nSYSTEM INFORMATION:" -ForegroundColor Cyan
`$sysInfo = Get-WmiObject Win32_ComputerSystem
Write-Host "Computer: `$(`$sysInfo.Name)"
Write-Host "Domain: `$(`$sysInfo.Domain)"
Write-Host "Total Memory: `$([math]::Round(`$sysInfo.TotalPhysicalMemory / 1GB, 2)) GB"

# CPU Information
Write-Host "`nCPU INFORMATION:" -ForegroundColor Cyan
`$cpu = Get-WmiObject Win32_Processor
Write-Host "Processor: `$(`$cpu.Name)"
Write-Host "Cores: `$(`$cpu.NumberOfCores)"
Write-Host "Logical Processors: `$(`$cpu.NumberOfLogicalProcessors)"

# Memory Status
Write-Host "`nMEMORY STATUS:" -ForegroundColor Cyan
`$os = Get-WmiObject Win32_OperatingSystem
`$totalMemGB = [math]::Round(`$os.TotalVisibleMemorySize / 1MB, 2)
`$freeMemGB = [math]::Round(`$os.FreePhysicalMemory / 1MB, 2)
`$usedMemGB = `$totalMemGB - `$freeMemGB
Write-Host "Total: `$totalMemGB GB"
Write-Host "Used: `$usedMemGB GB"
Write-Host "Free: `$freeMemGB GB"
Write-Host "Usage: `$([math]::Round((`$usedMemGB / `$totalMemGB) * 100, 1))%"

# Disk Space
Write-Host "`nDISK SPACE:" -ForegroundColor Cyan
Get-WmiObject Win32_LogicalDisk | Where-Object {`$_.DriveType -eq 3} | ForEach-Object {
    `$totalGB = [math]::Round(`$_.Size / 1GB, 2)
    `$freeGB = [math]::Round(`$_.FreeSpace / 1GB, 2)
    `$usedGB = `$totalGB - `$freeGB
    `$usagePercent = [math]::Round((`$usedGB / `$totalGB) * 100, 1)
    Write-Host "Drive `$(`$_.DeviceID) - Total: `$totalGB GB, Used: `$usedGB GB, Free: `$freeGB GB (`$usagePercent% used)"
}

# Network Adapters
Write-Host "`nNETWORK ADAPTERS:" -ForegroundColor Cyan
Get-NetAdapter | Where-Object {`$_.Status -eq 'Up'} | ForEach-Object {
    Write-Host "- `$(`$_.Name): `$(`$_.Status) (`$(`$_.LinkSpeed))"
}

# Services Status
Write-Host "`nCRITICAL SERVICES:" -ForegroundColor Cyan
`$criticalServices = @('Spooler', 'Themes', 'AudioSrv', 'BITS', 'EventLog', 'Winmgmt')
foreach (`$serviceName in `$criticalServices) {
    `$service = Get-Service -Name `$serviceName -ErrorAction SilentlyContinue
    if (`$service) {
        `$color = if (`$service.Status -eq 'Running') { 'Green' } else { 'Red' }
        Write-Host "- `$serviceName: `$(`$service.Status)" -ForegroundColor `$color
    } else {
        Write-Host "- `$serviceName: Not Found" -ForegroundColor Red
    }
}

Write-Host "`n" + "=" * 50
Write-Host "WinBatch V2 Monitoring Complete!" -ForegroundColor Green
"@

        $monitoringScript | Set-Content "C:\WinBatch_V2_Demo\monitoring_script.ps1" -Encoding UTF8
        Write-Host "Monitoring script created successfully"
      tags:
        - scripts
        - batch_demo

    # === –ë–õ–û–ö 8: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ ===
    - name: "üîç WinBatch V2: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
      win_shell: |
        PowerShell.exe -ExecutionPolicy Bypass -File "C:\WinBatch_V2_Demo\monitoring_script.ps1"
      register: monitoring_output
      tags:
        - monitoring
        - batch_demo

    # === –ë–õ–û–ö 9: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ===
    - name: "üìã WinBatch V2: –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
      win_shell: |
        $finalReport = @{
            'winbatch_version' = 'v2.0'
            'execution_timestamp' = '{{ ansible_date_time.iso8601 }}'
            'plugin_type' = 'self_contained'
            'custom_ee_required' = $false
            'execution_environment' = 'standard_awx_ee'
            'performance_notes' = 'This playbook was executed using WinBatch V2 self-contained plugin that works with any standard AWX EE'
            'configuration' = @{
                'batch_size' = {{ ansible_winbatch_batch_size }}
                'status_interval' = {{ ansible_winbatch_status_interval }}
                'execution_timeout' = {{ ansible_winbatch_execution_timeout }}
                'ssh_timeout' = {{ ansible_winbatch_ssh_timeout }}
            }
            'directories_created' = @({{ test_directories | to_json }})
            'files_created' = @({{ test_files | to_json }})
            'features' = @(
                'Auto dependency installation',
                'SSH multiplexing',
                'Batch task execution',
                'Real-time status updates',
                'Enhanced error handling',
                'Standard EE compatibility'
            )
            'performance_benefits' = @(
                'Single SSH connection for entire playbook',
                'Local task execution on Windows',
                'Batch processing reduces overhead',
                '300-500% performance improvement over traditional approach'
            )
            'compatibility' = @{
                'execution_environments' = @('Any standard AWX EE', 'Default EE', 'Minimal EE')
                'ansible_versions' = @('2.9+', '2.14+', '2.15+')
                'python_versions' = @('3.8+', '3.9+', '3.10+', '3.11+')
            }
        }
        
        $finalReport | ConvertTo-Json -Depth 4 | Set-Content "C:\WinBatch_V2_Demo\FINAL_REPORT.json" -Encoding UTF8
        Write-Host "Final report created successfully"
      tags:
        - report
        - batch_demo

    # === –ë–õ–û–ö 10: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
    - name: "üéâ WinBatch V2: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
      debug:
        msg: |
          ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
          ‚ïë                        üèÜ WINBATCH V2 SUCCESS! üèÜ                          ‚ïë
          ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
          ‚ïë                                                                              ‚ïë
          ‚ïë  ‚úÖ –°–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø–ª–∞–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –û–¢–õ–ò–ß–ù–û!                                ‚ïë
          ‚ïë  ‚úÖ –ù–ï —Ç—Ä–µ–±—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Execution Environment!                            ‚ïë
          ‚ïë  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!                                ‚ïë
          ‚ïë  ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª SSH multiplexing –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!                    ‚ïë
          ‚ïë  ‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {{ ansible_winbatch_batch_size }} –∑–∞–¥–∞—á!   ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïë  üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:                                                              ‚ïë
          ‚ïë     ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {{ test_directories | length }}                  ‚ïë
          ‚ïë     ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {{ test_files | length }}                            ‚ïë
          ‚ïë     ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: —Å–æ–±—Ä–∞–Ω–∞                                         ‚ïë
          ‚ïë     ‚Ä¢ –°–µ—Ç–µ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞                                ‚ïë
          ‚ïë     ‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±: –ø—Ä–æ–≤–µ—Ä–µ–Ω                                                ‚ïë
          ‚ïë     ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ø–æ–ª—É—á–µ–Ω—ã                                  ‚ïë
          ‚ïë     ‚Ä¢ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω                                 ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïë  üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:                                             ‚ïë
          ‚ïë     ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å –õ–Æ–ë–´–ú —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º AWX EE                                   ‚ïë
          ‚ïë     ‚Ä¢ –ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: 300-500%                                  ‚ïë
          ‚ïë     ‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏                     ‚ïë
          ‚ïë     ‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Ansible           ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïë  üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: C:\WinBatch_V2_Demo\                           ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
      tags:
        - report
        - batch_demo

    # === –ë–õ–û–ö 11: –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
    - name: "üßπ WinBatch V2: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"
      win_shell: |
        if (Test-Path "C:\WinBatch_V2_Demo") {
            Remove-Item "C:\WinBatch_V2_Demo" -Recurse -Force
            Write-Host "Test files cleaned up successfully"
        }
      when: cleanup_test_files | default(false) | bool
      tags:
        - cleanup
        - never