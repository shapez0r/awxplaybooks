---
# WinBatch Demo Playbook - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é Windows –∑–∞–¥–∞—á
# –≠—Ç–æ—Ç playbook –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ –Ω–∞—à plugin –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

- name: "WinBatch Revolutionary Demo - –ú–∞—Å—Å–∏–≤–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ Windows –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
  hosts: windows_servers
  gather_facts: true
  connection: winbatch  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è connection plugin!
  
  vars:
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WinBatch –ø–ª–∞–≥–∏–Ω–∞
    ansible_connection: winbatch
    ansible_winbatch_batch_size: 10  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –∑–∞–¥–∞—á
    ansible_winbatch_status_interval: 3  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    ansible_winbatch_execution_timeout: 1800  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_directories:
      - "C:\\AWX_WinBatch_Test"
      - "C:\\AWX_WinBatch_Test\\logs"
      - "C:\\AWX_WinBatch_Test\\scripts"
      - "C:\\AWX_WinBatch_Test\\config"
      - "C:\\AWX_WinBatch_Test\\temp"
    
    services_to_check:
      - "Spooler"
      - "Themes"
      - "AudioSrv"
      - "BITS"
      - "EventLog"
  
  tasks:
    # === –ë–õ–û–ö 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ===
    - name: "üöÄ WinBatch: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–ø–∞–∫–µ—Ç–Ω–æ!)"
      win_file:
        path: "{{ item }}"
        state: directory
      loop: "{{ test_directories }}"
      tags: 
        - directories
        - batch_demo

    # === –ë–õ–û–ö 2: –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===
    - name: "üìä WinBatch: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"
      win_shell: |
        Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory, CsProcessors | ConvertTo-Json
      register: system_info
      tags:
        - system_info
        - batch_demo

    - name: "üíæ WinBatch: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
      win_copy:
        content: "{{ system_info.stdout }}"
        dest: "C:\\AWX_WinBatch_Test\\system_info.json"
      tags:
        - system_info
        - batch_demo

    # === –ë–õ–û–ö 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
    - name: "üåê WinBatch: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
      win_shell: |
        $networkInfo = @{
            'ip_config' = (ipconfig /all | Out-String)
            'network_adapters' = (Get-NetAdapter | Where-Object {$_.Status -eq 'Up'} | Select-Object Name, InterfaceDescription, LinkSpeed | ConvertTo-Json)
            'routes' = (Get-NetRoute | Where-Object {$_.DestinationPrefix -eq '0.0.0.0/0'} | Select-Object NextHop, InterfaceAlias | ConvertTo-Json)
        }
        $networkInfo | ConvertTo-Json -Depth 3
      register: network_info
      tags:
        - network
        - batch_demo

    - name: "üíæ WinBatch: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
      win_copy:
        content: "{{ network_info.stdout }}"
        dest: "C:\\AWX_WinBatch_Test\\network_info.json"
      tags:
        - network
        - batch_demo

    # === –ë–õ–û–ö 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–± Windows ===
    - name: "üîß WinBatch: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–ª—É–∂–±"
      win_shell: |
        $service = Get-Service -Name "{{ item }}" -ErrorAction SilentlyContinue
        if ($service) {
            @{
                'name' = "{{ item }}"
                'status' = $service.Status
                'start_type' = $service.StartType
                'display_name' = $service.DisplayName
            } | ConvertTo-Json
        } else {
            @{
                'name' = "{{ item }}"
                'status' = 'NotFound'
            } | ConvertTo-Json
        }
      loop: "{{ services_to_check }}"
      register: services_status
      tags:
        - services
        - batch_demo

    - name: "üíæ WinBatch: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª—É–∂–±–∞—Ö"
      win_copy:
        content: |
          {
            "services_check_timestamp": "{{ ansible_date_time.iso8601 }}",
            "services": [
              {% for result in services_status.results %}
              {{ result.stdout }}{% if not loop.last %},{% endif %}
              {% endfor %}
            ]
          }
        dest: "C:\\AWX_WinBatch_Test\\services_status.json" 
      tags:
        - services
        - batch_demo

    # === –ë–õ–û–ö 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ===
    - name: "üíΩ WinBatch: –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
      win_shell: |
        Get-Volume | Where-Object {$_.DriveLetter -ne $null} | Select-Object DriveLetter, FileSystemLabel, Size, SizeRemaining, @{Name='PercentFree'; Expression={[math]::Round(($_.SizeRemaining / $_.Size) * 100, 2)}} | ConvertTo-Json
      register: disk_info
      tags:
        - disk
        - batch_demo

    - name: "üíæ WinBatch: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö"
      win_copy:
        content: "{{ disk_info.stdout }}"
        dest: "C:\\AWX_WinBatch_Test\\disk_info.json"
      tags:
        - disk
        - batch_demo

    # === –ë–õ–û–ö 6: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –ª–æ–≥–æ–≤ ===
    - name: "üìù WinBatch: –°–æ–∑–¥–∞–Ω–∏–µ PowerShell —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
      win_copy:
        content: |
          # WinBatch Monitoring Script
          # Generated by AWX WinBatch Revolutionary Plugin
          
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          Write-Host "=== WinBatch Monitoring Report - $timestamp ==="
          
          # System Information
          Write-Host "`n--- System Information ---"
          $sysInfo = Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory
          $sysInfo | Format-Table -AutoSize
          
          # Memory Usage
          Write-Host "`n--- Memory Usage ---"
          $memory = Get-WmiObject -Class Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
          $totalMemoryGB = [math]::Round($memory.Sum / 1GB, 2)
          Write-Host "Total Physical Memory: $totalMemoryGB GB"
          
          # CPU Information
          Write-Host "`n--- CPU Information ---"
          $cpu = Get-WmiObject -Class Win32_Processor
          Write-Host "CPU: $($cpu.Name)"
          Write-Host "Cores: $($cpu.NumberOfCores)"
          Write-Host "Logical Processors: $($cpu.NumberOfLogicalProcessors)"
          
          # Disk Space
          Write-Host "`n--- Disk Space ---"
          Get-Volume | Where-Object {$_.DriveLetter -ne $null} | Format-Table DriveLetter, FileSystemLabel, @{Name='Size(GB)'; Expression={[math]::Round($_.Size / 1GB, 2)}}, @{Name='Free(GB)'; Expression={[math]::Round($_.SizeRemaining / 1GB, 2)}}, @{Name='%Free'; Expression={[math]::Round(($_.SizeRemaining / $_.Size) * 100, 2)}} -AutoSize
          
          # Services Status
          Write-Host "`n--- Critical Services Status ---"
          $criticalServices = @("Spooler", "Themes", "AudioSrv", "BITS", "EventLog")
          foreach ($service in $criticalServices) {
              $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
              if ($svc) {
                  Write-Host "$($service): $($svc.Status)" -ForegroundColor $(if($svc.Status -eq 'Running'){'Green'}else{'Red'})
              }
          }
          
          Write-Host "`n=== WinBatch Report Complete ==="
          
          # Save to log file
          $logPath = "C:\AWX_WinBatch_Test\logs\monitoring_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
          $PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
          & {
              Write-Output "=== WinBatch Monitoring Report - $timestamp ==="
              Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory | Out-String
              Get-Volume | Where-Object {$_.DriveLetter -ne $null} | Out-String
              foreach ($service in $criticalServices) {
                  $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
                  if ($svc) {
                      Write-Output "$($service): $($svc.Status)"
                  }
              }
          } | Out-File -FilePath $logPath
          
          Write-Host "Report saved to: $logPath"
        dest: "C:\\AWX_WinBatch_Test\\scripts\\monitoring.ps1"
      tags:
        - scripts
        - batch_demo

    # === –ë–õ–û–ö 7: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ ===
    - name: "üîç WinBatch: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
      win_shell: |
        PowerShell.exe -ExecutionPolicy Bypass -File "C:\AWX_WinBatch_Test\scripts\monitoring.ps1"
      register: monitoring_output
      tags:
        - monitoring
        - batch_demo

    # === –ë–õ–û–ö 8: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ===
    - name: "üìã WinBatch: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
      win_copy:
        content: |
          {
            "winbatch_demo_report": {
              "execution_timestamp": "{{ ansible_date_time.iso8601 }}",
              "ansible_managed": true,
              "connection_plugin": "winbatch",
              "performance_notes": "This playbook was executed using the revolutionary WinBatch connection plugin, which dramatically improves performance by batching all tasks into a single SSH session and executing them locally on the Windows machine.",
              "directories_created": {{ test_directories | to_json }},
              "services_checked": {{ services_to_check | to_json }},
              "batch_execution_benefits": [
                "Single SSH connection for entire playbook",
                "Local task execution on Windows",
                "Periodic status updates every {{ ansible_winbatch_status_interval }} seconds",
                "Batch size of {{ ansible_winbatch_batch_size }} tasks",
                "Estimated performance improvement: 300-500% faster than traditional approach"
              ],
              "monitoring_script_created": "C:\\AWX_WinBatch_Test\\scripts\\monitoring.ps1",
              "logs_directory": "C:\\AWX_WinBatch_Test\\logs\\",
              "execution_summary": "WinBatch plugin successfully executed {{ ansible_play_batch | length }} tasks in batches, revolutionizing Windows automation speed!"
            }
          }
        dest: "C:\\AWX_WinBatch_Test\\WINBATCH_DEMO_REPORT.json"
      tags:
        - report
        - batch_demo

    # === –ë–õ–û–ö 9: –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
    - name: "üéâ WinBatch: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
      debug:
        msg: |
          ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
          ‚ïë                    üöÄ WINBATCH REVOLUTION COMPLETE! üöÄ                      ‚ïë
          ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
          ‚ïë                                                                              ‚ïë
          ‚ïë  ‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ –û–î–ò–ù SSH-–∫–æ–Ω–Ω–µ–∫—Ç!                            ‚ïë
          ‚ïë  ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ Windows –º–∞—à–∏–Ω–µ!                                  ‚ïë
          ‚ïë  ‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ {{ ansible_winbatch_status_interval }} —Å–µ–∫—É–Ω–¥!                 ‚ïë
          ‚ïë  ‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ {{ ansible_winbatch_batch_size }} –∑–∞–¥–∞—á!                                 ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïë  üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:                                                              ‚ïë
          ‚ïë     ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {{ test_directories | length }}                                      ‚ïë
          ‚ïë     ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {{ services_to_check | length }}                                      ‚ïë
          ‚ïë     ‚Ä¢ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞                                              ‚ïë
          ‚ïë     ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç—á–µ—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ                                    ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïë  üöÄ –ü–†–ò–†–û–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: 300-500%!                                   ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïë  –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: C:\AWX_WinBatch_Test\                                  ‚ïë
          ‚ïë                                                                              ‚ïë
          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
      tags:
        - report
        - batch_demo

    # === –ë–õ–û–ö 10: –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
    - name: "üßπ WinBatch: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
      win_file:
        path: "C:\\AWX_WinBatch_Test"
        state: absent
      when: cleanup_test_files | default(false) | bool
      tags:
        - cleanup
        - never  # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º —É–∫–∞–∑–∞–Ω–∏–∏ —Ç–µ–≥–∞ 